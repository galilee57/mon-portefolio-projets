{"version":3,"file":"static/js/12.9182151b.chunk.js","mappings":"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","sources":["ProjetsJS/SimulationCovidJS.js","webpack://mon-portefolio-projets/./src/styles/SimulationCovid.css?b95c"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport p5 from 'p5';\nimport '../styles/SimulationCovid.css';\n\nconst SimulationComponent = () => {\n  const [populationSize, setPopulationSize] = useState(100);\n  const [infectionRate, setInfectionRate] = useState(0.3);\n  const [recoveryTime, setRecoveryTime] = useState(300);\n  const [mortalityRate, setMortalityRate] = useState(0.05);\n  const [capacityThreshold, setCapacityThreshold] = useState(30);\n  const [running, setRunning] = useState(false);\n  const [statistics, setStatistics] = useState({\n    susceptibles: 0,\n    infectes: 0,\n    retablis: 0,\n    decedes: 0,\n  });\n\n  const sketchRef = useRef();\n  const susceptibles = useRef([]);\n  const infectes = useRef([]);\n  const retablis = useRef([]);\n  const decedes = useRef([]);\n\n  useEffect(() => {\n    const sketch = (p) => {\n      let population = [];\n      const infectionRadius = 10;\n      const speed = 2;\n\n      class Person {\n        constructor() {\n          this.x = p.random(p.width / 2);\n          this.y = p.random(p.height);\n          this.vx = p.random(-speed, speed);\n          this.vy = p.random(-speed, speed);\n          this.state = 'S';\n          this.infectedTime = 0;\n        }\n\n        move() {\n          this.x += this.vx;\n          this.y += this.vy;\n          if (this.x < 0 || this.x > p.width / 2) this.vx *= -1;\n          if (this.y < 0 || this.y > p.height) this.vy *= -1;\n          this.x = p.constrain(this.x, 0, p.width / 2);\n          this.y = p.constrain(this.y, 0, p.height);\n        }\n\n        infect(other) {\n          if (this.state === 'I' && other.state === 'S') {\n            const d = p.dist(this.x, this.y, other.x, other.y);\n            if (d < infectionRadius && p.random() < infectionRate) {\n              other.state = 'I';\n              other.infectedTime = 0;\n            }\n          }\n        }\n\n        update(currentMortalityRate) {\n          if (this.state === 'I') {\n            this.infectedTime++;\n            if (this.infectedTime > recoveryTime) {\n              if (p.random() < currentMortalityRate) {\n                this.state = 'D';\n              } else {\n                this.state = 'R';\n              }\n            }\n          }\n        }\n\n        show() {\n          if (this.state === 'S') p.fill(0, 0, 255);\n          else if (this.state === 'I') p.fill(255, 0, 0);\n          else if (this.state === 'R') p.fill(0, 255, 0);\n          if (this.state !== 'D') {\n            p.noStroke();\n            p.ellipse(this.x, this.y, 10, 10);\n          }\n        }\n      }\n\n      const resetSimulation = () => {\n        population = [];\n        for (let i = 0; i < populationSize; i++) {\n          population.push(new Person());\n        }\n        population[0].state = 'I';\n      };\n\n      const drawGraph = () => {\n        const graphWidth = p.width / 2;\n        const graphHeight = p.height;\n\n        p.push();\n        p.translate(p.width / 2, 0);\n        p.stroke(0);\n        p.line(0, graphHeight, graphWidth, graphHeight);\n        p.line(0, 0, 0, graphHeight);\n\n        const drawCurve = (data, color) => {\n          p.stroke(color);\n          p.noFill();\n          p.beginShape();\n          data.forEach((value, i) => {\n            const x = p.map(i, 0, data.length, 0, graphWidth);\n            const y = p.map(value, 0, populationSize, graphHeight, 0);\n            p.vertex(x, y);\n          });\n          p.endShape();\n        };\n\n        drawCurve(susceptibles.current, [0, 0, 255]);\n        drawCurve(infectes.current, [255, 0, 0]);\n        drawCurve(retablis.current, [0, 255, 0]);\n        drawCurve(decedes.current, [0, 0, 0]);\n\n        p.pop();\n      };\n\n      p.setup = () => {\n        p.createCanvas(1200, 600);\n        resetSimulation();\n      };\n\n      p.draw = () => {\n        if (running) {\n          p.background(255);\n          let numSusceptibles = 0;\n          let numInfectes = 0;\n          let numRetablis = 0;\n          let numDecedes = 0;\n\n          const currentMortalityRate = mortalityRate + (population.filter(p => p.state === 'I').length > capacityThreshold ? 0.05 : 0);\n\n          for (let i = population.length - 1; i >= 0; i--) {\n            const person = population[i];\n            person.move();\n            person.update(currentMortalityRate);\n            person.show();\n            for (let other of population) {\n              if (person !== other) person.infect(other);\n            }\n\n            if (person.state === 'S') numSusceptibles++;\n            else if (person.state === 'I') numInfectes++;\n            else if (person.state === 'R') numRetablis++;\n            else if (person.state === 'D') {\n              population.splice(i, 1);\n              numDecedes++;\n            }\n          }\n\n          setStatistics((prevStatistics) => ({\n            susceptibles: numSusceptibles,\n            infectes: numInfectes,\n            retablis: numRetablis,\n            decedes: prevStatistics.decedes + numDecedes,\n          }));\n\n          susceptibles.current.push(numSusceptibles);\n          infectes.current.push(numInfectes);\n          retablis.current.push(numRetablis);\n          decedes.current.push(statistics.decedes);\n\n          drawGraph();\n        }\n      };\n    };\n\n    const canvas = new p5(sketch, sketchRef.current);\n    return () => {\n      canvas.remove();\n    };\n  }, [populationSize, infectionRate, recoveryTime, mortalityRate, capacityThreshold, running]);\n\n  const startSimulation = () => setRunning(true);\n  const pauseSimulation = () => setRunning(false);\n\n  return (\n    <div className=\"container\">\n      <div className=\"controls\">\n        <label>Population: </label>\n        <input type=\"number\" value={populationSize} onChange={(e) => setPopulationSize(Number(e.target.value))} />\n        <label>Infection Rate: </label>\n        <input type=\"number\" value={infectionRate} onChange={(e) => setInfectionRate(Number(e.target.value))} />\n        <label>Recovery Time: </label>\n        <input type=\"number\" value={recoveryTime} onChange={(e) => setRecoveryTime(Number(e.target.value))} />\n        <label>Mortality Rate: </label>\n        <input type=\"number\" value={mortalityRate} onChange={(e) => setMortalityRate(Number(e.target.value))} />\n        <label>Hospital Capacity: </label>\n        <input type=\"number\" value={capacityThreshold} onChange={(e) => setCapacityThreshold(Number(e.target.value))} />\n        <button onClick={startSimulation}>Démarrer</button>\n        <button onClick={pauseSimulation}>Pause</button>\n      </div>\n      <div className=\"statistics\">\n        <div>Susceptibles: <span>{statistics.susceptibles}</span></div>\n        <div>Infectés: <span>{statistics.infectes}</span></div>\n        <div>Rétablis: <span>{statistics.retablis}</span></div>\n        <div>Décédés: <span>{statistics.decedes}</span></div>\n      </div>\n      <div ref={sketchRef}></div>\n    </div>\n  );\n};\n\nexport default SimulationComponent;\n","// extracted by mini-css-extract-plugin\nexport default {};"],"names":["SimulationComponent","populationSize","setPopulationSize","useState","infectionRate","setInfectionRate","recoveryTime","setRecoveryTime","mortalityRate","setMortalityRate","capacityThreshold","setCapacityThreshold","running","setRunning","statistics","setStatistics","susceptibles","infectes","retablis","decedes","sketchRef","useRef","useEffect","canvas","p5","p","population","Person","constructor","this","x","random","width","y","height","vx","vy","state","infectedTime","move","constrain","infect","other","dist","update","currentMortalityRate","show","fill","noStroke","ellipse","setup","createCanvas","resetSimulation","i","push","draw","background","numSusceptibles","numInfectes","numRetablis","numDecedes","filter","length","person","splice","prevStatistics","current","drawGraph","graphWidth","graphHeight","translate","stroke","line","drawCurve","data","color","noFill","beginShape","forEach","value","map","vertex","endShape","pop","remove","_jsxs","className","children","_jsx","type","onChange","e","Number","target","onClick","startSimulation","pauseSimulation","ref"],"sourceRoot":""}