{"version":3,"file":"static/js/930.146920eb.chunk.js","mappings":"qNAKAA,EAAAA,GAAQC,SAASC,EAAAA,GAAeC,EAAAA,GAAaC,EAAAA,GAAYC,EAAAA,GAAcC,EAAAA,GAASC,EAAAA,IAEhF,MAqJA,EArJwBC,KAEtB,MAUOC,EAAaC,IAAkBC,EAAAA,EAAAA,UAAS,KACxCC,EAAmBC,IAAwBF,EAAAA,EAAAA,UAAS,IAGrDG,EAAWA,KACf,IAAIC,EAAI,EACNC,EAAI,EACN,KAAa,IAAND,GAASA,EAAIE,KAAKC,SACzB,KAAa,IAANF,GAASA,EAAIC,KAAKC,SACzB,OAAOD,KAAKE,MAAM,EAAMF,KAAKG,IAAIL,IAAME,KAAKI,IAAI,EAAMJ,KAAKK,GAAKN,EAAE,GAGpEO,EAAAA,EAAAA,YAAU,KAER,MAAMC,EAAS,GACf,IAAK,IAAIC,EAAI,EAAGA,EAzBR,IAyBeA,IAAK,CAC1B,IAAIC,EAxBG,GAwBMZ,IAzBN,GA0BPY,EAAST,KAAKU,IAAI,EAAGV,KAAKW,IAAI,EAAGF,IACjCF,EAAOK,KAAK,CACVH,OAAQA,EACRI,QA3BK,GA4BLC,SAAUd,KAAKC,UAEnB,CAGA,MAAMc,EAAS,GACf,IAAK,IAAIP,EAAI,EAAGA,EAjCP,IAiCeA,IACtBO,EAAOH,KAAK,CACVI,KAAMhB,KAAKC,SAlCN,GAkCsB,WAAa,cACxCa,SAAUd,KAAKC,WAKnB,IAAK,IAAIO,EAAI,EAAGA,EArCC,GAqCeA,IAE9BO,EAAOE,SAAQC,IACbA,EAAMJ,SAAWd,KAAKC,QAAQ,IAIhCM,EAAOU,SAAQE,IACbJ,EAAOE,SAAQC,IACTlB,KAAKoB,IAAID,EAAML,SAAWI,EAAMJ,UAAY,KAC3B,aAAfI,EAAMF,MAAuBhB,KAAKC,SAAWkB,EAAMV,OACrDU,EAAMN,SAlDH,GAmDqB,gBAAfK,EAAMF,OACfG,EAAMN,SAnDJ,IAqDN,GACA,IAKN,MAAMQ,EAAoBd,EAAOe,KAAIH,GAASA,EAAMN,UAASU,MAAK,CAACC,EAAGC,IAAMD,EAAIC,IAChFhC,EAAe4B,GAEf,MAAMK,EAA6BnB,EAAOe,KAAIH,IAAK,CACjDQ,EAAGR,EAAMV,OACTmB,EAAGT,EAAMN,YAEXjB,EAAqB8B,EAA2B,GAC/C,IAGH,MAAMG,EAAuB,CAC3BC,OAAQtC,EAAY8B,KAAI,CAACS,EAAGvB,IAAMA,IAClCwB,SAAU,CACR,CACEC,MAAO,0BACPC,KAAM1C,EACN2C,gBAAiB,0BACjBC,YAAa,wBACbC,YAAa,KAMbC,EAA2B,CAC/BN,SAAU,CACR,CACEC,MAAO,oBACPC,KAAMvC,EACNwC,gBAAiB,2BAKvB,OACEI,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,8CACJD,EAAAA,EAAAA,MAAA,OAAKG,UAAU,kBAAiBF,SAAA,EAC9BC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,QAAOF,UACpBC,EAAAA,EAAAA,KAACE,EAAAA,GAAG,CACFT,KAAML,EACNe,QAAS,CACPC,OAAQ,CACNjB,EAAG,CACDkB,aAAa,KAInBC,MAAO,IACPC,OAAQ,SAGZP,EAAAA,EAAAA,KAAA,OAAKC,UAAU,QAAOF,UACpBC,EAAAA,EAAAA,KAACQ,EAAAA,GAAO,CACNf,KAAMI,EACNM,QAAS,CACPC,OAAQ,CACNlB,EAAG,CACDuB,MAAO,CACLC,SAAS,EACTC,KAAM,WAGVxB,EAAG,CACDsB,MAAO,CACLC,SAAS,EACTC,KAAM,cAKdL,MAAO,IACPC,OAAQ,aAIV,C,+CCvJV,SAAiB,C","sources":["ProjetsJS/TalentvLuck.js","webpack://mon-portefolio-projets/./src/styles/TalentvLuck.css?970a"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Bar, Scatter } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, BarElement, PointElement, Tooltip, Legend } from 'chart.js';\nimport '../styles/TalentvLuck.css';\n\nChartJS.register(CategoryScale, LinearScale, BarElement, PointElement, Tooltip, Legend);\n\nconst TalentvChanceJS = () => {\n  // Paramètres du modèle\n  const N = 1000;\n  const mT = 0.6;\n  const σT = 0.1;\n  const C0 = 10;\n  const NE = 500;\n  const pL = 0.5;\n  const chance = 0.5;\n  const perte = 0.9;\n  const iterations = 80;\n\n  const [capitalData, setCapitalData] = useState([]);\n  const [talentCapitalData, setTalentCapitalData] = useState([]);\n\n  // Fonction pour générer un nombre aléatoire suivant une distribution normale\n  const randn_bm = () => {\n    let u = 0,\n      v = 0;\n    while (u === 0) u = Math.random();\n    while (v === 0) v = Math.random();\n    return Math.sqrt(-2.0 * Math.log(u)) * Math.cos(2.0 * Math.PI * v);\n  };\n\n  useEffect(() => {\n    // Création des agents\n    const agents = [];\n    for (let i = 0; i < N; i++) {\n      let talent = randn_bm() * σT + mT;\n      talent = Math.max(0, Math.min(1, talent));\n      agents.push({\n        talent: talent,\n        capital: C0,\n        position: Math.random() // Ajout de la position initiale aléatoire pour chaque agent\n      });\n    }\n\n    // Création des événements\n    const events = [];\n    for (let i = 0; i < NE; i++) {\n      events.push({\n        type: Math.random() < pL ? 'chanceux' : 'malchanceux',\n        position: Math.random()\n      });\n    }\n\n    // Simulation de l'évolution du modèle\n    for (let i = 0; i < iterations; i++) {\n      // Déplacement aléatoire des événements\n      events.forEach(event => {\n        event.position = Math.random();\n      });\n\n      // Interaction entre agents et événements\n      agents.forEach(agent => {\n        events.forEach(event => {\n          if (Math.abs(agent.position - event.position) < 0.1) {\n            if (event.type === 'chanceux' && Math.random() < agent.talent) {\n              agent.capital *= chance;\n            } else if (event.type === 'malchanceux') {\n              agent.capital *= perte;\n            }\n          }\n        });\n      });\n    }\n\n    // Collecte des données de capital et talent vs capital\n    const capitalDataSorted = agents.map(agent => agent.capital).sort((a, b) => a - b);\n    setCapitalData(capitalDataSorted);\n\n    const talentCapitalDataFormatted = agents.map(agent => ({\n      x: agent.talent,\n      y: agent.capital\n    }));\n    setTalentCapitalData(talentCapitalDataFormatted);\n  }, []);\n\n  // Données pour l'histogramme de la distribution du capital\n  const capitalHistogramData = {\n    labels: capitalData.map((_, i) => i),\n    datasets: [\n      {\n        label: 'Distribution du capital',\n        data: capitalData,\n        backgroundColor: 'rgba(54, 162, 235, 0.2)',\n        borderColor: 'rgba(54, 162, 235, 1)',\n        borderWidth: 1\n      }\n    ]\n  };\n\n  // Données pour le nuage de points talent vs capital\n  const talentCapitalScatterData = {\n    datasets: [\n      {\n        label: 'Talent vs Capital',\n        data: talentCapitalData,\n        backgroundColor: 'rgba(255, 99, 132, 1)'\n      }\n    ]\n  };\n\n  return (\n    <div>\n      <h2>Simulation de la Distribution du Capital</h2>\n      <div className=\"chart-container\">\n        <div className=\"chart\">\n          <Bar\n            data={capitalHistogramData}\n            options={{\n              scales: {\n                y: {\n                  beginAtZero: true\n                }\n              }\n            }}\n            width={600}\n            height={400}\n          />\n        </div>\n        <div className=\"chart\">\n          <Scatter\n            data={talentCapitalScatterData}\n            options={{\n              scales: {\n                x: {\n                  title: {\n                    display: true,\n                    text: 'Talent'\n                  }\n                },\n                y: {\n                  title: {\n                    display: true,\n                    text: 'Capital'\n                  }\n                }\n              }\n            }}\n            width={600}\n            height={400}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default TalentvChanceJS;\n","// extracted by mini-css-extract-plugin\nexport default {};"],"names":["ChartJS","register","CategoryScale","LinearScale","BarElement","PointElement","Tooltip","Legend","TalentvChanceJS","capitalData","setCapitalData","useState","talentCapitalData","setTalentCapitalData","randn_bm","u","v","Math","random","sqrt","log","cos","PI","useEffect","agents","i","talent","max","min","push","capital","position","events","type","forEach","event","agent","abs","capitalDataSorted","map","sort","a","b","talentCapitalDataFormatted","x","y","capitalHistogramData","labels","_","datasets","label","data","backgroundColor","borderColor","borderWidth","talentCapitalScatterData","_jsxs","children","_jsx","className","Bar","options","scales","beginAtZero","width","height","Scatter","title","display","text"],"sourceRoot":""}