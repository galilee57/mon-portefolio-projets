{"version":3,"file":"static/js/662.c6a20d35.chunk.js","mappings":"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","sources":["ProjetsJS/SimulatorsJS/NormalCurve.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\n\nconst NormalCurve = () => {\n    const canvasRef = useRef(null);\n    const [mean, setMean] = useState(0);\n    const [sigma, setSigma] = useState(1);\n    const [cp, setCp] = useState(0);\n    const [cpl, setCpl] = useState(0);\n    const [cpu, setCpu] = useState(0);\n\n    const LSL = -3;\n    const USL = 3;\n\n    useEffect(() => {\n        drawNormalCurve(mean, sigma);\n        updateIndices(mean, sigma);\n    }, [mean, sigma]);\n\n    const calculateCp = (sigma) => (USL - LSL) / (6 * sigma);\n    const calculateCpu = (mean, sigma) => (USL - mean) / (3 * sigma);\n    const calculateCpl = (mean, sigma) => (mean - LSL) / (3 * sigma);\n\n    const updateIndices = (mean, sigma) => {\n        setCp(calculateCp(sigma).toFixed(2));\n        setCpu(calculateCpu(mean, sigma).toFixed(2));\n        setCpl(calculateCpl(mean, sigma).toFixed(2));\n    };\n\n    const drawNormalCurve = (mean, sigma) => {\n        const canvas = canvasRef.current;\n        const ctx = canvas.getContext('2d');\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        \n        // Draw the axes\n        ctx.beginPath();\n        ctx.moveTo(50, 350);\n        ctx.lineTo(750, 350);\n        ctx.moveTo(400, 50);\n        ctx.lineTo(400, 350);\n        ctx.strokeStyle = 'black';\n        ctx.lineWidth = 1;\n        ctx.stroke();\n        \n        // Draw the y-axis scale\n        for (let i = 0; i <= 1; i += 0.2) {\n            let y = 350 - i * 300;\n            ctx.moveTo(45, y);\n            ctx.lineTo(55, y);\n            ctx.stroke();\n            ctx.fillText(i.toFixed(1), 20, y + 5);\n        }\n        \n        // Draw the normal curve\n        ctx.beginPath();\n        for (let x = 0; x <= canvas.width; x++) {\n            let scaledX = (x - canvas.width / 2) / 50;\n            let y = (1 / (sigma * Math.sqrt(2 * Math.PI))) * Math.exp(-0.5 * Math.pow((scaledX - mean) / sigma, 2));\n            let scaledY = 350 - y * 300;\n            \n            if (x === 0) {\n                ctx.moveTo(x, scaledY);\n            } else {\n                ctx.lineTo(x, scaledY);\n            }\n        }\n        \n        ctx.strokeStyle = 'black';\n        ctx.lineWidth = 2;\n        ctx.stroke();\n        \n        // Draw LSL and USL\n        let LSLX = 400 + LSL * 50;\n        let USLX = 400 + USL * 50;\n        \n        ctx.beginPath();\n        ctx.moveTo(LSLX, 50);\n        ctx.lineTo(LSLX, 350);\n        ctx.moveTo(USLX, 50);\n        ctx.lineTo(USLX, 350);\n        ctx.strokeStyle = 'red';\n        ctx.lineWidth = 2;\n        ctx.stroke();\n        \n        // Label the LSL and USL\n        ctx.fillStyle = 'red';\n        ctx.font = '14px Arial';\n        ctx.fillText('LSL', LSLX - 15, 40);\n        ctx.fillText('USL', USLX - 15, 40);\n        \n        // Color the areas beyond LSL and USL\n        ctx.fillStyle = 'red';\n        ctx.globalAlpha = 0.5;\n        \n        for (let x = 0; x <= canvas.width; x++) {\n            let scaledX = (x - canvas.width / 2) / 50;\n            let y = (1 / (sigma * Math.sqrt(2 * Math.PI))) * Math.exp(-0.5 * Math.pow((scaledX - mean) / sigma, 2));\n            let scaledY = 350 - y * 300;\n            \n            if (scaledX < LSL || scaledX > USL) {\n                ctx.fillRect(x, scaledY, 1, 350 - scaledY);\n            }\n        }\n        \n        ctx.globalAlpha = 1.0;\n    };\n\n    return (\n        <div>\n            <canvas ref={canvasRef} width=\"800\" height=\"400\" id=\"normalCanvas\"></canvas>\n            <div>\n                <label>Mean:</label>\n                <input\n                    type=\"range\"\n                    min=\"-5\"\n                    max=\"5\"\n                    step=\"0.1\"\n                    value={mean}\n                    onChange={(e) => setMean(parseFloat(e.target.value))}\n                />\n                <input\n                    type=\"number\"\n                    value={mean}\n                    onChange={(e) => setMean(parseFloat(e.target.value))}\n                />\n            </div>\n            <div>\n                <label>Sigma:</label>\n                <input\n                    type=\"range\"\n                    min=\"0.5\"\n                    max=\"2\"\n                    step=\"0.1\"\n                    value={sigma}\n                    onChange={(e) => setSigma(parseFloat(e.target.value))}\n                />\n                <input\n                    type=\"number\"\n                    value={sigma}\n                    onChange={(e) => setSigma(parseFloat(e.target.value))}\n                />\n            </div>\n            <div>\n                <p>Cp: {cp}</p>\n                <p>Cpl: {cpl}</p>\n                <p>Cpu: {cpu}</p>\n            </div>\n        </div>\n    );\n};\n\nexport default NormalCurve;\n"],"names":["NormalCurve","canvasRef","useRef","mean","setMean","useState","sigma","setSigma","cp","setCp","cpl","setCpl","cpu","setCpu","useEffect","drawNormalCurve","updateIndices","calculateCp","toFixed","calculateCpu","calculateCpl","canvas","current","ctx","getContext","clearRect","width","height","beginPath","moveTo","lineTo","strokeStyle","lineWidth","stroke","i","y","fillText","x","scaledX","scaledY","Math","sqrt","PI","exp","pow","fillStyle","font","LSLX","USLX","globalAlpha","fillRect","_jsxs","children","_jsx","ref","id","type","min","max","step","value","onChange","e","parseFloat","target"],"sourceRoot":""}