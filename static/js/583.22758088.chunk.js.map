{"version":3,"file":"static/js/583.22758088.chunk.js","mappings":"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","sources":["ProjetsJS/SimulatorsJS.js","ProjetsJS/SimulatorsJS/NormalCurve.js","ProjetsJS/SimulatorsJS/NormalDistributionChart.js"],"sourcesContent":["import React, { useState } from 'react';\nimport NormalCurve from '../ProjetsJS/SimulatorsJS/NormalCurve';\nimport NormalDistributionChart from '../ProjetsJS/SimulatorsJS/NormalDistributionChart';\n\nconst SimulatorsJS = () => {\n    const [selectedChart, setSelectedChart] = useState('NormalCurve');\n\n    const handleChartChange = (event) => {\n        setSelectedChart(event.target.value);\n    };\n\n    return (\n        <div>\n            <div>\n                <label>Choisissez un graphique : </label>\n                <select value={selectedChart} onChange={handleChartChange}>\n                    <option value=\"NormalCurve\">Graphique NormalCurve</option>\n                    <option value=\"NormalDistributionChart\">Graphique NormalDistributionChart</option>\n                </select>\n            </div>\n\n            <div>\n                {selectedChart === 'NormalCurve' && <NormalCurve />}\n                {selectedChart === 'NormalDistributionChart' && <NormalDistributionChart />}\n            </div>\n        </div>\n    );\n};\n\nexport default SimulatorsJS;\n\n","import React, { useState, useRef, useEffect } from 'react';\n\nconst NormalCurve = () => {\n    const canvasRef = useRef(null);\n    const [mean, setMean] = useState(0);\n    const [sigma, setSigma] = useState(1);\n    const [cp, setCp] = useState(0);\n    const [cpl, setCpl] = useState(0);\n    const [cpu, setCpu] = useState(0);\n\n    const LSL = -3;\n    const USL = 3;\n\n    useEffect(() => {\n        drawNormalCurve(mean, sigma);\n        updateIndices(mean, sigma);\n    }, [mean, sigma]);\n\n    const calculateCp = (sigma) => (USL - LSL) / (6 * sigma);\n    const calculateCpu = (mean, sigma) => (USL - mean) / (3 * sigma);\n    const calculateCpl = (mean, sigma) => (mean - LSL) / (3 * sigma);\n\n    const updateIndices = (mean, sigma) => {\n        setCp(calculateCp(sigma).toFixed(2));\n        setCpu(calculateCpu(mean, sigma).toFixed(2));\n        setCpl(calculateCpl(mean, sigma).toFixed(2));\n    };\n\n    const drawNormalCurve = (mean, sigma) => {\n        const canvas = canvasRef.current;\n        const ctx = canvas.getContext('2d');\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        \n        // Draw the axes\n        ctx.beginPath();\n        ctx.moveTo(50, 350);\n        ctx.lineTo(750, 350);\n        ctx.moveTo(400, 50);\n        ctx.lineTo(400, 350);\n        ctx.strokeStyle = 'black';\n        ctx.lineWidth = 1;\n        ctx.stroke();\n        \n        // Draw the y-axis scale\n        for (let i = 0; i <= 1; i += 0.2) {\n            let y = 350 - i * 300;\n            ctx.moveTo(45, y);\n            ctx.lineTo(55, y);\n            ctx.stroke();\n            ctx.fillText(i.toFixed(1), 20, y + 5);\n        }\n        \n        // Draw the normal curve\n        ctx.beginPath();\n        for (let x = 0; x <= canvas.width; x++) {\n            let scaledX = (x - canvas.width / 2) / 50;\n            let y = (1 / (sigma * Math.sqrt(2 * Math.PI))) * Math.exp(-0.5 * Math.pow((scaledX - mean) / sigma, 2));\n            let scaledY = 350 - y * 300;\n            \n            if (x === 0) {\n                ctx.moveTo(x, scaledY);\n            } else {\n                ctx.lineTo(x, scaledY);\n            }\n        }\n        \n        ctx.strokeStyle = 'black';\n        ctx.lineWidth = 2;\n        ctx.stroke();\n        \n        // Draw LSL and USL\n        let LSLX = 400 + LSL * 50;\n        let USLX = 400 + USL * 50;\n        \n        ctx.beginPath();\n        ctx.moveTo(LSLX, 50);\n        ctx.lineTo(LSLX, 350);\n        ctx.moveTo(USLX, 50);\n        ctx.lineTo(USLX, 350);\n        ctx.strokeStyle = 'red';\n        ctx.lineWidth = 2;\n        ctx.stroke();\n        \n        // Label the LSL and USL\n        ctx.fillStyle = 'red';\n        ctx.font = '14px Arial';\n        ctx.fillText('LSL', LSLX - 15, 40);\n        ctx.fillText('USL', USLX - 15, 40);\n        \n        // Color the areas beyond LSL and USL\n        ctx.fillStyle = 'red';\n        ctx.globalAlpha = 0.5;\n        \n        for (let x = 0; x <= canvas.width; x++) {\n            let scaledX = (x - canvas.width / 2) / 50;\n            let y = (1 / (sigma * Math.sqrt(2 * Math.PI))) * Math.exp(-0.5 * Math.pow((scaledX - mean) / sigma, 2));\n            let scaledY = 350 - y * 300;\n            \n            if (scaledX < LSL || scaledX > USL) {\n                ctx.fillRect(x, scaledY, 1, 350 - scaledY);\n            }\n        }\n        \n        ctx.globalAlpha = 1.0;\n    };\n\n    return (\n        <div>\n            <canvas ref={canvasRef} width=\"800\" height=\"400\" id=\"normalCanvas\"></canvas>\n            <div>\n                <label>Mean:</label>\n                <input\n                    type=\"range\"\n                    min=\"-5\"\n                    max=\"5\"\n                    step=\"0.1\"\n                    value={mean}\n                    onChange={(e) => setMean(parseFloat(e.target.value))}\n                />\n                <input\n                    type=\"number\"\n                    value={mean}\n                    onChange={(e) => setMean(parseFloat(e.target.value))}\n                />\n            </div>\n            <div>\n                <label>Sigma:</label>\n                <input\n                    type=\"range\"\n                    min=\"0.5\"\n                    max=\"2\"\n                    step=\"0.1\"\n                    value={sigma}\n                    onChange={(e) => setSigma(parseFloat(e.target.value))}\n                />\n                <input\n                    type=\"number\"\n                    value={sigma}\n                    onChange={(e) => setSigma(parseFloat(e.target.value))}\n                />\n            </div>\n            <div>\n                <p>Cp: {cp}</p>\n                <p>Cpl: {cpl}</p>\n                <p>Cpu: {cpu}</p>\n            </div>\n        </div>\n    );\n};\n\nexport default NormalCurve;\n","import React, { useState, useRef, useEffect } from 'react';\nimport * as d3 from 'd3';\n\nconst NormalDistributionChart = () => {\n    const [mean1, setMean1] = useState(0);\n    const [mean2, setMean2] = useState(0);\n    const [sigma1, setSigma1] = useState(1);\n    const [sigma2, setSigma2] = useState(1);\n\n    const svgRef = useRef();\n\n    const width = 800;\n    const height = 300;\n    const margin = { top: 20, right: 20, bottom: 30, left: 50 };\n\n    const normale = (x, mean, sigma) => {\n        return (1 / (sigma * Math.sqrt(2 * Math.PI))) * Math.exp(-0.5 * Math.pow((x - mean) / sigma, 2));\n    };\n\n    const generateNormaleData = (mean, sigma) => {\n        const data = [];\n        for (let x = -10; x <= 10; x += 0.1) {\n            data.push({ x: x, y: normale(x, mean, sigma) });\n        }\n        return data;\n    };\n\n    const generateSumData = (data1, data2) => {\n        return data1.map((d, i) => ({ x: d.x, y: d.y + data2[i].y }));\n    };\n\n    useEffect(() => {\n        const svg = d3.select(svgRef.current)\n            .attr('width', width + margin.left + margin.right)\n            .attr('height', height + margin.top + margin.bottom)\n            .append('g')\n            .attr('transform', `translate(${margin.left},${margin.top})`);\n\n        const x = d3.scaleLinear().domain([-10, 10]).range([0, width]);\n        const y = d3.scaleLinear().domain([0, 1.2]).range([height, 0]);\n\n        const xAxis = d3.axisBottom(x);\n        const yAxis = d3.axisLeft(y);\n\n        svg.append('g')\n            .attr('class', 'x axis')\n            .attr('transform', `translate(0,${height})`)\n            .call(xAxis);\n\n        svg.append('g')\n            .attr('class', 'y axis')\n            .call(yAxis);\n\n        const line = d3.line()\n            .x(d => x(d.x))\n            .y(d => y(d.y));\n\n        const updateChart = () => {\n            const normaleData1 = generateNormaleData(mean1, sigma1);\n            const normaleData2 = generateNormaleData(mean2, sigma2);\n            const sumData = generateSumData(normaleData1, normaleData2);\n\n            const path1 = svg.selectAll('.line1').data([normaleData1]);\n            path1.enter().append('path')\n                .attr('class', 'line1')\n                .merge(path1)\n                .attr('d', line)\n                .attr('stroke', 'red')\n                .attr('stroke-width', 2)\n                .attr('fill', 'orange')\n                .attr('opacity', 0.4);\n            path1.exit().remove();\n\n            const path2 = svg.selectAll('.line2').data([normaleData2]);\n            path2.enter().append('path')\n                .attr('class', 'line2')\n                .merge(path2)\n                .attr('d', line)\n                .attr('stroke', 'darkblue')\n                .attr('stroke-width', 2)\n                .attr('fill', 'blue')\n                .attr('opacity', 0.4);\n            path2.exit().remove();\n\n            const path3 = svg.selectAll('.line3').data([sumData]);\n            path3.enter().append('path')\n                .attr('class', 'line3')\n                .merge(path3)\n                .attr('d', line)\n                .attr('stroke', 'black')\n                .attr('stroke-width', 2)\n                .attr('fill', 'none');\n            path3.exit().remove();\n        };\n\n        updateChart();\n\n        return () => {\n            d3.select(svgRef.current).selectAll('*').remove();\n        };\n    }, [mean1, mean2, sigma1, sigma2]);\n\n    return (\n        <div>\n            <div>\n                <label>Mean 1:</label>\n                <input\n                    type=\"range\"\n                    min=\"-7\"\n                    max=\"7\"\n                    step=\"0.1\"\n                    value={mean1}\n                    onChange={(e) => setMean1(parseFloat(e.target.value))}\n                />\n                <input\n                    type=\"number\"\n                    value={mean1}\n                    onChange={(e) => setMean1(parseFloat(e.target.value))}\n                />\n            </div>\n            <div>\n                <label>Sigma 1:</label>\n                <input\n                    type=\"range\"\n                    min=\"0.5\"\n                    max=\"2\"\n                    step=\"0.1\"\n                    value={sigma1}\n                    onChange={(e) => setSigma1(parseFloat(e.target.value))}\n                />\n                <input\n                    type=\"number\"\n                    value={sigma1}\n                    onChange={(e) => setSigma1(parseFloat(e.target.value))}\n                />\n            </div>\n            <div>\n                <label>Mean 2:</label>\n                <input\n                    type=\"range\"\n                    min=\"-7\"\n                    max=\"7\"\n                    step=\"0.1\"\n                    value={mean2}\n                    onChange={(e) => setMean2(parseFloat(e.target.value))}\n                />\n                <input\n                    type=\"number\"\n                    value={mean2}\n                    onChange={(e) => setMean2(parseFloat(e.target.value))}\n                />\n            </div>\n            <div>\n                <label>Sigma 2:</label>\n                <input\n                    type=\"range\"\n                    min=\"0.5\"\n                    max=\"2\"\n                    step=\"0.1\"\n                    value={sigma2}\n                    onChange={(e) => setSigma2(parseFloat(e.target.value))}\n                />\n                <input\n                    type=\"number\"\n                    value={sigma2}\n                    onChange={(e) => setSigma2(parseFloat(e.target.value))}\n                />\n            </div>\n            <div id=\"chart\">\n                <svg ref={svgRef}></svg>\n            </div>\n        </div>\n    );\n};\n\nexport default NormalDistributionChart;\n"],"names":["SimulatorsJS","selectedChart","setSelectedChart","useState","_jsxs","children","_jsx","value","onChange","event","target","NormalCurve","NormalDistributionChart","canvasRef","useRef","mean","setMean","sigma","setSigma","cp","setCp","cpl","setCpl","cpu","setCpu","useEffect","drawNormalCurve","updateIndices","calculateCp","toFixed","calculateCpu","calculateCpl","canvas","current","ctx","getContext","clearRect","width","height","beginPath","moveTo","lineTo","strokeStyle","lineWidth","stroke","i","y","fillText","x","scaledX","scaledY","Math","sqrt","PI","exp","pow","fillStyle","font","LSLX","USLX","globalAlpha","fillRect","ref","id","type","min","max","step","e","parseFloat","mean1","setMean1","mean2","setMean2","sigma1","setSigma1","sigma2","setSigma2","svgRef","margin","normale","generateNormaleData","data","push","svg","d3","attr","append","domain","range","xAxis","yAxis","call","line","d","updateChart","normaleData1","normaleData2","sumData","data2","map","generateSumData","path1","selectAll","enter","merge","exit","remove","path2","path3"],"sourceRoot":""}