{"version":3,"file":"static/js/55.e21d4237.chunk.js","mappings":"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","sources":["ProjetsJS/SimulatorsJS/NormalDistributionChart.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport * as d3 from 'd3';\n\nconst NormalDistributionChart = () => {\n    const [mean1, setMean1] = useState(0);\n    const [mean2, setMean2] = useState(0);\n    const [sigma1, setSigma1] = useState(1);\n    const [sigma2, setSigma2] = useState(1);\n\n    const svgRef = useRef();\n\n    const width = 800;\n    const height = 300;\n    const margin = { top: 20, right: 20, bottom: 30, left: 50 };\n\n    const normale = (x, mean, sigma) => {\n        return (1 / (sigma * Math.sqrt(2 * Math.PI))) * Math.exp(-0.5 * Math.pow((x - mean) / sigma, 2));\n    };\n\n    const generateNormaleData = (mean, sigma) => {\n        const data = [];\n        for (let x = -10; x <= 10; x += 0.1) {\n            data.push({ x: x, y: normale(x, mean, sigma) });\n        }\n        return data;\n    };\n\n    const generateSumData = (data1, data2) => {\n        return data1.map((d, i) => ({ x: d.x, y: d.y + data2[i].y }));\n    };\n\n    useEffect(() => {\n        const svg = d3.select(svgRef.current)\n            .attr('width', width + margin.left + margin.right)\n            .attr('height', height + margin.top + margin.bottom)\n            .append('g')\n            .attr('transform', `translate(${margin.left},${margin.top})`);\n\n        const x = d3.scaleLinear().domain([-10, 10]).range([0, width]);\n        const y = d3.scaleLinear().domain([0, 1.2]).range([height, 0]);\n\n        const xAxis = d3.axisBottom(x);\n        const yAxis = d3.axisLeft(y);\n\n        svg.append('g')\n            .attr('class', 'x axis')\n            .attr('transform', `translate(0,${height})`)\n            .call(xAxis);\n\n        svg.append('g')\n            .attr('class', 'y axis')\n            .call(yAxis);\n\n        const line = d3.line()\n            .x(d => x(d.x))\n            .y(d => y(d.y));\n\n        const updateChart = () => {\n            const normaleData1 = generateNormaleData(mean1, sigma1);\n            const normaleData2 = generateNormaleData(mean2, sigma2);\n            const sumData = generateSumData(normaleData1, normaleData2);\n\n            const path1 = svg.selectAll('.line1').data([normaleData1]);\n            path1.enter().append('path')\n                .attr('class', 'line1')\n                .merge(path1)\n                .attr('d', line)\n                .attr('stroke', 'red')\n                .attr('stroke-width', 2)\n                .attr('fill', 'orange')\n                .attr('opacity', 0.4);\n            path1.exit().remove();\n\n            const path2 = svg.selectAll('.line2').data([normaleData2]);\n            path2.enter().append('path')\n                .attr('class', 'line2')\n                .merge(path2)\n                .attr('d', line)\n                .attr('stroke', 'darkblue')\n                .attr('stroke-width', 2)\n                .attr('fill', 'blue')\n                .attr('opacity', 0.4);\n            path2.exit().remove();\n\n            const path3 = svg.selectAll('.line3').data([sumData]);\n            path3.enter().append('path')\n                .attr('class', 'line3')\n                .merge(path3)\n                .attr('d', line)\n                .attr('stroke', 'black')\n                .attr('stroke-width', 2)\n                .attr('fill', 'none');\n            path3.exit().remove();\n        };\n\n        updateChart();\n\n        return () => {\n            d3.select(svgRef.current).selectAll('*').remove();\n        };\n    }, [mean1, mean2, sigma1, sigma2]);\n\n    return (\n        <div>\n            <div>\n                <label>Mean 1:</label>\n                <input\n                    type=\"range\"\n                    min=\"-7\"\n                    max=\"7\"\n                    step=\"0.1\"\n                    value={mean1}\n                    onChange={(e) => setMean1(parseFloat(e.target.value))}\n                />\n                <input\n                    type=\"number\"\n                    value={mean1}\n                    onChange={(e) => setMean1(parseFloat(e.target.value))}\n                />\n            </div>\n            <div>\n                <label>Sigma 1:</label>\n                <input\n                    type=\"range\"\n                    min=\"0.5\"\n                    max=\"2\"\n                    step=\"0.1\"\n                    value={sigma1}\n                    onChange={(e) => setSigma1(parseFloat(e.target.value))}\n                />\n                <input\n                    type=\"number\"\n                    value={sigma1}\n                    onChange={(e) => setSigma1(parseFloat(e.target.value))}\n                />\n            </div>\n            <div>\n                <label>Mean 2:</label>\n                <input\n                    type=\"range\"\n                    min=\"-7\"\n                    max=\"7\"\n                    step=\"0.1\"\n                    value={mean2}\n                    onChange={(e) => setMean2(parseFloat(e.target.value))}\n                />\n                <input\n                    type=\"number\"\n                    value={mean2}\n                    onChange={(e) => setMean2(parseFloat(e.target.value))}\n                />\n            </div>\n            <div>\n                <label>Sigma 2:</label>\n                <input\n                    type=\"range\"\n                    min=\"0.5\"\n                    max=\"2\"\n                    step=\"0.1\"\n                    value={sigma2}\n                    onChange={(e) => setSigma2(parseFloat(e.target.value))}\n                />\n                <input\n                    type=\"number\"\n                    value={sigma2}\n                    onChange={(e) => setSigma2(parseFloat(e.target.value))}\n                />\n            </div>\n            <div id=\"chart\">\n                <svg ref={svgRef}></svg>\n            </div>\n        </div>\n    );\n};\n\nexport default NormalDistributionChart;\n"],"names":["NormalDistributionChart","mean1","setMean1","useState","mean2","setMean2","sigma1","setSigma1","sigma2","setSigma2","svgRef","useRef","margin","normale","x","mean","sigma","Math","sqrt","PI","exp","pow","generateNormaleData","data","push","y","useEffect","svg","d3","current","attr","append","domain","range","xAxis","yAxis","call","line","d","updateChart","normaleData1","normaleData2","sumData","data2","map","i","generateSumData","path1","selectAll","enter","merge","exit","remove","path2","path3","_jsxs","children","_jsx","type","min","max","step","value","onChange","e","parseFloat","target","id","ref"],"sourceRoot":""}