{"version":3,"file":"static/js/403.08e12abf.chunk.js","mappings":"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","sources":["Projets_Musculation/ChartComponent.js","Projets_Musculation/Exercices.js","Projets_Musculation/GymBookComponent.js","Projets_Musculation/Musculation.js","Projets_Musculation/Programmes.js","components/Button.js","webpack://mon-portefolio-projets/./src/components/Button.css?7da6"],"sourcesContent":["import React from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, LineElement, PointElement, Title, Tooltip, Legend } from 'chart.js';\nimport chartData from './typeProgram.json'; // Import du fichier JSON\n\n// Initialiser les composants nécessaires pour Chart.js\nChartJS.register(CategoryScale, LinearScale, LineElement, PointElement, Title, Tooltip, Legend);\n\nconst ChartComponent = () => {\n  const options = {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: 'top',\n      },\n      title: {\n        display: true,\n        text: 'Comparaison des ventes sur plusieurs années',\n      },\n    },\n    maintainAspectRatio: false // Pour que le CSS contrôle la taille du graphique\n  };\n\n  return (\n    <div style={{ width: '80vw', height: '70vh', margin: '0 auto' }}> {/* Limitation de taille */}\n      <Line data={chartData} options={options} />\n    </div>\n  );\n};\n\nexport default ChartComponent;\n","import React from 'react';\nimport WeeklySessionsChart from './GymBookComponent';\n\nconst Exercices = () => {\n  return (\n    <div>\n      <h2>Liste des Exercices</h2>\n      <WeeklySessionsChart />\n    </div>\n  );\n};\n\nexport default Exercices;","import React, { useEffect, useState } from 'react';\nimport Papa from 'papaparse';\nimport { Bar } from 'react-chartjs-2';\n\nconst WeeklySessionsChart = () => {\n  const [chartData, setChartData] = useState({});\n\n  useEffect(() => {\n    // Fonction pour lire le fichier CSV\n    const fetchCSV = async () => {\n      const response = await fetch('./GymBook.csv');\n      const reader = response.body.getReader();\n      const result = await reader.read();\n      const decoder = new TextDecoder('utf-16');\n      const csv = decoder.decode(result.value);\n\n      // Parser le CSV avec papaparse\n      Papa.parse(csv, {\n        header: true,\n        complete: (results) => {\n          processSessions(results.data);\n        },\n      });\n    };\n\n    // Fonction pour traiter les données et préparer le graphique\n    const processSessions = (data) => {\n      // Filtrer les lignes avec une date définie\n      const validSessions = data.filter(item => item.Date);\n      const sessions = validSessions.map(item => new Date(item.Date));\n      const weeks = {};\n\n      sessions.forEach(date => {\n        const week = `${date.getFullYear()}-W${Math.ceil(date.getDate() / 7)}`;\n        weeks[week] = (weeks[week] || 0) + 1;\n      });\n\n      const labels = Object.keys(weeks);\n      const values = Object.values(weeks);\n\n      setChartData({\n        labels: labels,\n        datasets: [\n          {\n            label: 'Séances par semaine',\n            data: values,\n          },\n        ],\n      });\n    };\n\n    fetchCSV();\n  }, []);\n\n  return (\n    <div>\n      <h2>Nombre de séances par semaine</h2>\n      <Bar data={chartData} />\n    </div>\n  );\n};\n\nexport default WeeklySessionsChart;\n","import React from 'react';\nimport { Routes, Route} from 'react-router-dom';\nimport Button from '../components/Button';\nimport Exercices from './Exercices';\nimport Programmes from './Programmes';\n\nconst Musculation = () => {\n  return (\n    <div>\n      <h1>Musculation</h1>\n      <nav>\n        <Button text=\"Exercices\" to=\"exercices\" />\n        <Button text=\"Programmes\" to=\"programmes\" />\n      </nav>\n      {/* Sous-routes */}\n      <Routes>\n        <Route path=\"/\" element={<p>Veuillez sélectionner une option.</p>} />\n        <Route path=\"exercices\" element={<Exercices />} />\n        <Route path=\"programmes\" element={<Programmes />} />\n      </Routes>\n    </div>\n  );\n};\n\nexport default Musculation;","import ChartComponent  from \"./ChartComponent\";\n\nconst Programmes = () => {\n  \n\n  return (\n    <div>\n      <h2>Programmes d'Entraînement</h2>\n      <h3>L'objectif de ce module est d'évaluer ma progression : plateaux atteints, travail en hypertrophie par groupe musculaire.<br></br>\n      Pour calculer la contribution de chaque séance à l'hypertrophie, j'utilise un splitage qui dépend du nombre de répétitions.\n      </h3>\n      <ChartComponent />\n      <h3>Le fichier issu de GymBook est traité pour afficher les exercices par période et par région musculaire.<br></br>\n      Je rajoute 3 colonnes F-H-E qui calcule la répartition du volume selon chaque type.<br></br>\n      La 1RM est calculée par la formule d'Epley : j'affiche la 1RM max sur la période, selon le groupe musculaire.\n      </h3>\n    </div>\n  );\n};\n\nexport default Programmes;\n","import React from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport './Button.css';\n\nconst Button = ({ text, to }) => {\n    const navigate = useNavigate();\n\n    const handleClick = () => {\n        navigate(to, { relative: 'path'});\n    }\n\n    return (\n        <button className=\"custom-button\" onClick={handleClick}>\n            {text}\n        </button>\n    );\n};\n\nexport default Button;","// extracted by mini-css-extract-plugin\nexport default {};"],"names":["ChartJS","register","CategoryScale","LinearScale","LineElement","PointElement","Title","Tooltip","Legend","ChartComponent","_jsxs","style","width","height","margin","children","_jsx","Line","data","chartData","options","responsive","plugins","legend","position","title","display","text","maintainAspectRatio","Exercices","WeeklySessionsChart","setChartData","useState","useEffect","processSessions","sessions","filter","item","Date","map","weeks","forEach","date","week","getFullYear","Math","ceil","getDate","labels","Object","keys","values","datasets","label","async","reader","fetch","body","getReader","result","read","csv","TextDecoder","decode","value","Papa","header","complete","results","fetchCSV","Bar","Musculation","Button","to","Routes","Route","path","element","Programmes","_ref","navigate","useNavigate","className","onClick","handleClick","relative"],"sourceRoot":""}